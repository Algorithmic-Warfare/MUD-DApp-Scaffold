// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { StorageSystem } from "../../namespaces/Bilkatz/systems/StorageSystem/StorageSystem.sol";
import { InventoryItemParams } from "@eveworld/world-v2/src/namespaces/evefrontier/systems/inventory/types.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type StorageSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "Bilkatz", name: "StorageSystem" }))
StorageSystemType constant storageSystem = StorageSystemType.wrap(
  0x737942696c6b61747a0000000000000053746f7261676553797374656d000000
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title StorageSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library StorageSystemLib {
  error StorageSystemLib_CallingFromRootSystem();

  function initStorage(StorageSystemType self, uint256 ssuId) internal {
    return CallWrapper(self.toResourceId(), address(0)).initStorage(ssuId);
  }

  function requestItem(StorageSystemType self, uint256 objektId, InventoryItemParams[] memory items) internal {
    return CallWrapper(self.toResourceId(), address(0)).requestItem(objektId, items);
  }

  function initStorage(CallWrapper memory self, uint256 ssuId) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert StorageSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_initStorage_uint256.initStorage, (ssuId));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function requestItem(CallWrapper memory self, uint256 objektId, InventoryItemParams[] memory items) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert StorageSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _requestItem_uint256_InventoryItemParamsArray.requestItem,
      (objektId, items)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function initStorage(RootCallWrapper memory self, uint256 ssuId) internal {
    bytes memory systemCall = abi.encodeCall(_initStorage_uint256.initStorage, (ssuId));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function requestItem(RootCallWrapper memory self, uint256 objektId, InventoryItemParams[] memory items) internal {
    bytes memory systemCall = abi.encodeCall(
      _requestItem_uint256_InventoryItemParamsArray.requestItem,
      (objektId, items)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(StorageSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(StorageSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), msg.sender);
  }

  function callAsRootFrom(StorageSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(StorageSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(StorageSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (StorageSystemType) {
    return StorageSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(StorageSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _initStorage_uint256 {
  function initStorage(uint256 ssuId) external;
}

interface _requestItem_uint256_InventoryItemParamsArray {
  function requestItem(uint256 objektId, InventoryItemParams[] memory items) external;
}

using StorageSystemLib for StorageSystemType global;
using StorageSystemLib for CallWrapper global;
using StorageSystemLib for RootCallWrapper global;
