// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { DispenserSystem } from "../../namespaces/Bilkatz/systems/DispenserSystem/DispenserSystem.sol";
import { InventoryItemParams } from "@eveworld/world-v2/src/namespaces/evefrontier/systems/inventory/types.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type DispenserSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "Bilkatz", name: "DispenserSystem" }))
DispenserSystemType constant dispenserSystem = DispenserSystemType.wrap(
  0x737942696c6b61747a0000000000000044697370656e73657253797374656d00
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title DispenserSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library DispenserSystemLib {
  error DispenserSystemLib_CallingFromRootSystem();

  function initDispenser(DispenserSystemType self, uint256 ssuId) internal {
    return CallWrapper(self.toResourceId(), address(0)).initDispenser(ssuId);
  }

  function requestDispensation(DispenserSystemType self, address playerID, uint256 dispenserID) internal {
    return CallWrapper(self.toResourceId(), address(0)).requestDispensation(playerID, dispenserID);
  }

  function configureDispenser(
    DispenserSystemType self,
    uint256 dispenserID,
    bool repeatable,
    uint256[] memory stackIds
  ) internal {
    return CallWrapper(self.toResourceId(), address(0)).configureDispenser(dispenserID, repeatable, stackIds);
  }

  function addStacksToDispenser(DispenserSystemType self, uint256 dispenserID, uint256[] memory stackIds) internal {
    return CallWrapper(self.toResourceId(), address(0)).addStacksToDispenser(dispenserID, stackIds);
  }

  function itemParamsToStackIds(
    DispenserSystemType self,
    InventoryItemParams[] memory items
  ) internal returns (uint256[] memory) {
    return CallWrapper(self.toResourceId(), address(0)).itemParamsToStackIds(items);
  }

  function StackIdsToItemParams(
    DispenserSystemType self,
    uint256[] memory stackIds
  ) internal view returns (InventoryItemParams[] memory) {
    return CallWrapper(self.toResourceId(), address(0)).StackIdsToItemParams(stackIds);
  }

  function setPlayerAccess(
    DispenserSystemType self,
    address playerID,
    uint256 dispenserID,
    bool hasAccessFlag
  ) internal {
    return CallWrapper(self.toResourceId(), address(0)).setPlayerAccess(playerID, dispenserID, hasAccessFlag);
  }

  function setTribeAccess(DispenserSystemType self, uint256 tribeID, uint256 dispenserID, bool hasAccessFlag) internal {
    return CallWrapper(self.toResourceId(), address(0)).setTribeAccess(tribeID, dispenserID, hasAccessFlag);
  }

  function setPlayerAdminAccess(DispenserSystemType self, address playerID, bool hasAdminAccessFlag) internal {
    return CallWrapper(self.toResourceId(), address(0)).setPlayerAdminAccess(playerID, hasAdminAccessFlag);
  }

  function setTribeAdminAccess(DispenserSystemType self, uint256 tribeID, bool hasAdminAccessFlag) internal {
    return CallWrapper(self.toResourceId(), address(0)).setTribeAdminAccess(tribeID, hasAdminAccessFlag);
  }

  function initDispenser(CallWrapper memory self, uint256 ssuId) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert DispenserSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_initDispenser_uint256.initDispenser, (ssuId));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function requestDispensation(CallWrapper memory self, address playerID, uint256 dispenserID) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert DispenserSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _requestDispensation_address_uint256.requestDispensation,
      (playerID, dispenserID)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function configureDispenser(
    CallWrapper memory self,
    uint256 dispenserID,
    bool repeatable,
    uint256[] memory stackIds
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert DispenserSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _configureDispenser_uint256_bool_uint256Array.configureDispenser,
      (dispenserID, repeatable, stackIds)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function addStacksToDispenser(CallWrapper memory self, uint256 dispenserID, uint256[] memory stackIds) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert DispenserSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _addStacksToDispenser_uint256_uint256Array.addStacksToDispenser,
      (dispenserID, stackIds)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function itemParamsToStackIds(
    CallWrapper memory self,
    InventoryItemParams[] memory items
  ) internal returns (uint256[] memory) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert DispenserSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _itemParamsToStackIds_InventoryItemParamsArray.itemParamsToStackIds,
      (items)
    );

    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    return abi.decode(result, (uint256[]));
  }

  function StackIdsToItemParams(
    CallWrapper memory self,
    uint256[] memory stackIds
  ) internal view returns (InventoryItemParams[] memory) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert DispenserSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_StackIdsToItemParams_uint256Array.StackIdsToItemParams, (stackIds));
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    return abi.decode(result, (InventoryItemParams[]));
  }

  function setPlayerAccess(
    CallWrapper memory self,
    address playerID,
    uint256 dispenserID,
    bool hasAccessFlag
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert DispenserSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _setPlayerAccess_address_uint256_bool.setPlayerAccess,
      (playerID, dispenserID, hasAccessFlag)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function setTribeAccess(CallWrapper memory self, uint256 tribeID, uint256 dispenserID, bool hasAccessFlag) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert DispenserSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _setTribeAccess_uint256_uint256_bool.setTribeAccess,
      (tribeID, dispenserID, hasAccessFlag)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function setPlayerAdminAccess(CallWrapper memory self, address playerID, bool hasAdminAccessFlag) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert DispenserSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _setPlayerAdminAccess_address_bool.setPlayerAdminAccess,
      (playerID, hasAdminAccessFlag)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function setTribeAdminAccess(CallWrapper memory self, uint256 tribeID, bool hasAdminAccessFlag) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert DispenserSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _setTribeAdminAccess_uint256_bool.setTribeAdminAccess,
      (tribeID, hasAdminAccessFlag)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function initDispenser(RootCallWrapper memory self, uint256 ssuId) internal {
    bytes memory systemCall = abi.encodeCall(_initDispenser_uint256.initDispenser, (ssuId));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function requestDispensation(RootCallWrapper memory self, address playerID, uint256 dispenserID) internal {
    bytes memory systemCall = abi.encodeCall(
      _requestDispensation_address_uint256.requestDispensation,
      (playerID, dispenserID)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function configureDispenser(
    RootCallWrapper memory self,
    uint256 dispenserID,
    bool repeatable,
    uint256[] memory stackIds
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _configureDispenser_uint256_bool_uint256Array.configureDispenser,
      (dispenserID, repeatable, stackIds)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function addStacksToDispenser(RootCallWrapper memory self, uint256 dispenserID, uint256[] memory stackIds) internal {
    bytes memory systemCall = abi.encodeCall(
      _addStacksToDispenser_uint256_uint256Array.addStacksToDispenser,
      (dispenserID, stackIds)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function itemParamsToStackIds(
    RootCallWrapper memory self,
    InventoryItemParams[] memory items
  ) internal returns (uint256[] memory) {
    bytes memory systemCall = abi.encodeCall(
      _itemParamsToStackIds_InventoryItemParamsArray.itemParamsToStackIds,
      (items)
    );

    bytes memory result = SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
    return abi.decode(result, (uint256[]));
  }

  function StackIdsToItemParams(
    RootCallWrapper memory self,
    uint256[] memory stackIds
  ) internal view returns (InventoryItemParams[] memory) {
    bytes memory systemCall = abi.encodeCall(_StackIdsToItemParams_uint256Array.StackIdsToItemParams, (stackIds));

    bytes memory result = SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
    return abi.decode(result, (InventoryItemParams[]));
  }

  function setPlayerAccess(
    RootCallWrapper memory self,
    address playerID,
    uint256 dispenserID,
    bool hasAccessFlag
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _setPlayerAccess_address_uint256_bool.setPlayerAccess,
      (playerID, dispenserID, hasAccessFlag)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function setTribeAccess(
    RootCallWrapper memory self,
    uint256 tribeID,
    uint256 dispenserID,
    bool hasAccessFlag
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _setTribeAccess_uint256_uint256_bool.setTribeAccess,
      (tribeID, dispenserID, hasAccessFlag)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function setPlayerAdminAccess(RootCallWrapper memory self, address playerID, bool hasAdminAccessFlag) internal {
    bytes memory systemCall = abi.encodeCall(
      _setPlayerAdminAccess_address_bool.setPlayerAdminAccess,
      (playerID, hasAdminAccessFlag)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function setTribeAdminAccess(RootCallWrapper memory self, uint256 tribeID, bool hasAdminAccessFlag) internal {
    bytes memory systemCall = abi.encodeCall(
      _setTribeAdminAccess_uint256_bool.setTribeAdminAccess,
      (tribeID, hasAdminAccessFlag)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(DispenserSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(DispenserSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), msg.sender);
  }

  function callAsRootFrom(DispenserSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(DispenserSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(DispenserSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (DispenserSystemType) {
    return DispenserSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(DispenserSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _initDispenser_uint256 {
  function initDispenser(uint256 ssuId) external;
}

interface _requestDispensation_address_uint256 {
  function requestDispensation(address playerID, uint256 dispenserID) external;
}

interface _configureDispenser_uint256_bool_uint256Array {
  function configureDispenser(uint256 dispenserID, bool repeatable, uint256[] memory stackIds) external;
}

interface _addStacksToDispenser_uint256_uint256Array {
  function addStacksToDispenser(uint256 dispenserID, uint256[] memory stackIds) external;
}

interface _itemParamsToStackIds_InventoryItemParamsArray {
  function itemParamsToStackIds(InventoryItemParams[] memory items) external;
}

interface _StackIdsToItemParams_uint256Array {
  function StackIdsToItemParams(uint256[] memory stackIds) external;
}

interface _setPlayerAccess_address_uint256_bool {
  function setPlayerAccess(address playerID, uint256 dispenserID, bool hasAccessFlag) external;
}

interface _setTribeAccess_uint256_uint256_bool {
  function setTribeAccess(uint256 tribeID, uint256 dispenserID, bool hasAccessFlag) external;
}

interface _setPlayerAdminAccess_address_bool {
  function setPlayerAdminAccess(address playerID, bool hasAdminAccessFlag) external;
}

interface _setTribeAdminAccess_uint256_bool {
  function setTribeAdminAccess(uint256 tribeID, bool hasAdminAccessFlag) external;
}

using DispenserSystemLib for DispenserSystemType global;
using DispenserSystemLib for CallWrapper global;
using DispenserSystemLib for RootCallWrapper global;
